syntax = "proto3";

package protobuf;

message UserDetails {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
  repeated string network_names = 4;
  repeated string friend_ids = 5;
}

message UserFriendship {
  string user1 = 1;
  string user2 = 2;
}

message CreateUserRequest {
  UserDetails user = 1;
}

message CreateUserResponse {
  bool success = 1;
  string email = 2;
}

message GetUserRequest {
  string email = 1;
}

message GetUserResponse {
  UserDetails user = 1;
}

message SearchForUserRequest {
  string first_name = 1;
  string last_name = 2;
}

message SearchForUserResponse {
  repeated UserDetails users = 1;
}

message CreateFriendshipRequest {
  UserFriendship friendship = 1;
}

message CreateFriendshipResponse {
  bool success = 1;
}

message ReplyToFriendshipRequest {
  string email_1 = 1;
  string email_2 = 2;
  bool accepted = 3;
}

message ReplyToFriendshipResponse {
  bool success = 1;
}

message ItemDetails {
  string title = 1;
  string description = 2;
  double asking_price = 3;
  string network_name = 4;
  bytes image = 5;
}

message SubmitItemRequest {
  ItemDetails item_details = 1;
}

message SubmitItemResponse {
  bool success = 1;
}

message ItemOffer {
  string title = 1;
  double offer = 2;
}

message SubmitItemOfferRequest {
  ItemOffer item_offer = 1;
}

message SubmitItemOfferResponse {
  bool success = 1;
}

message NetworkDetails {
  string name = 1;
  string owner_id = 2;
  string description = 3;
}

message CreateNetworkRequest {
  NetworkDetails network = 1;
}

message CreateNetworkResponse {
  string network_name = 1;
}

message GetNetworksForUserRequest {
  string email = 1;
}

message GetNetworksForUserResponse {
  repeated NetworkDetails networks = 1;
}

message SearchForNetworksRequest {
  string network_name = 1;
}

message SearchForNetworksResponse {
  repeated NetworkDetails networks = 1;
}

message InviteUserToNetworkRequest {
  string network_name = 1;
  string email = 2;
}

message InviteUserToNetworkResponse {
  bool success = 1;
}

message ReplyToNetworkInviteRequest {
  string network_name = 1;
  string email = 2;
  bool accepted = 3;
}

message ReplyToNetworkInviteResponse {
  bool success = 1;
}

message SaveImageRequest {
  bytes image = 1;
}

message SaveImageResponse {
  bool success = 1;
  string image_id = 2;
}

message GetImageRequest {
  string image_id = 1;
}

message GetImageResponse {
  bool success = 1;
  bytes image = 2;
}

message GetItemsForUserRequest {
  string email = 1;
}

message GetItemsForUserResponse {
  bool success = 1;
  repeated ItemDetails items = 2; 
}

message GetItemsForNetworkRequest {
  string network_name = 1;
}

message GetItemsForNetworkResponse {
  bool success = 1;
  repeated ItemDetails items = 2;
}

message JoinNetworkRequest {
  string email = 1;
  string network_name = 2;
}

message JoinNetworkResponse {
  bool success = 1;
}

service Network {
  rpc SaveImage(SaveImageRequest) returns (SaveImageResponse);
  rpc GetImage(GetImageRequest) returns (GetImageResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc SearchForUser(SearchForUserRequest) returns (SearchForUserResponse);
  rpc CreateFriendship(CreateFriendshipRequest) returns (CreateFriendshipResponse);
  rpc ReplyToFriendship(ReplyToFriendshipRequest) returns (ReplyToFriendshipResponse);
  rpc SubmitItem(SubmitItemRequest) returns (SubmitItemResponse);
  rpc SubmitItemOffer(SubmitItemOfferRequest) returns (SubmitItemOfferResponse);
  rpc CreateNetwork(CreateNetworkRequest) returns (CreateNetworkResponse);
  rpc GetNetworksForUser(GetNetworksForUserRequest) returns (GetNetworksForUserResponse);
  rpc GetItemsForUser(GetItemsForUserRequest) returns (GetItemsForUserResponse);
  rpc GetItemsForNetwork(GetItemsForNetworkRequest) returns (GetItemsForNetworkResponse);
  rpc SearchForNetworks(SearchForNetworksRequest) returns (SearchForNetworksResponse);
  rpc InviteUserToNetwork(InviteUserToNetworkRequest) returns (InviteUserToNetworkResponse);
  rpc ReplyToNetworkInvite(ReplyToNetworkInviteRequest) returns (ReplyToNetworkInviteResponse);
  rpc JoinNetwork(JoinNetworkRequest) returns (JoinNetworkResponse);
}