syntax = "proto3";

package protobuf;

// User
message UserDetails {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
  repeated string network_ids = 4;
  repeated string friend_ids = 5;
}

message UserFriendship {
  string user1 = 1;
  string user2 = 2;
}

message NewUserRequest {
  UserDetails user = 1;
  string pwd = 2;
}

message NewUserResponse {
  bool success = 1;
  string user_id = 2;
}

message GetUserDetailsRequest {
  string user_id = 1;
}

message GetUserDetailsResponse {
  UserDetails user = 1;
}

message SearchUserRequest {
  string first_name = 1;
  string last_name = 2;
}

message SearchUserResponse {
  repeated UserDetails users = 1;
}

message CreateFriendshipRequest {
  UserFriendship friendship = 1;
}

message CreateFriendshipResponse {
  bool success = 1;
}

message FriendshipReplyRequest {
  string user1 = 1;
  string user2 = 2;
  bool accepted = 3;
}

message FriendshipReplyResponse {
  bool success = 1;
}

service User {
  rpc CreateUser(NewUserRequest) returns (NewUserResponse);
  rpc GetUser(GetUserDetailsRequest) returns (GetUserDetailsResponse);
  rpc SearchForUser(SearchUserRequest) returns (SearchUserResponse);
  rpc CreateFriendship(CreateFriendshipRequest) returns (CreateFriendshipResponse);
  rpc ReplyToFriendship(FriendshipReplyRequest) returns (FriendshipReplyResponse);
}


// Item

message ItemDetails {
  string title = 1;
  string description = 2;
  double asking_price = 3;
  string network_id = 4;
  // To-do: posting photos
}

message NewItemRequest {
  ItemDetails item = 1;
}

message NewItemResponse {
  string item_id = 1;
}

message ItemOffer {
  string item_id = 1;
  double offer = 2;
}

message SubmitItemRequest {
  ItemDetails new_item = 1;
}

message SubmitItemResponse {
  string item_id = 1;
}

message ItemOfferRequest {
  ItemOffer bid = 1;
}

message ItemOfferResponse {
  bool success = 1;
}

service Item {
  rpc SubmitItem(SubmitItemRequest) returns (SubmitItemResponse);
  rpc SubmitItemOffer(ItemOfferRequest) returns (ItemOfferResponse);
}


// Network

message NetworkDetails {
  string name = 1;
  string owner_id = 2;
  string description = 3;
  bool public_posting = 4;
}

message NewNetworkRequest {
  NetworkDetails network = 1;
}

message NewNetworkResponse {
  string network_id = 1;
}

message NetworksForUserRequest {
  string user_id = 1;
}

message NetworksForUserResponse {
  repeated NetworkDetails networks = 1;
}

message SearchForNetworksRequest {
  string network_name = 1;
}

message SearchForNetworksResponse {
  repeated NetworkDetails networks = 1;
}

message InviteUserToNetworkRequest {
  string network_id = 1;
  string user_id = 2;
}

message InviteUserToNetworkResponse {
  bool success = 1;
}

message NetworkInviteReplyRequest {
  string network_id = 1;
  string user_id = 2;
  bool accepted = 3;
}

message NetworkInviteReplyResponse {
  bool success = 1;
}

service Network {
  rpc CreateNetwork(NewNetworkRequest) returns (NewNetworkResponse);
  rpc GetNetworksForUser(NetworksForUserRequest) returns (NetworksForUserResponse);
  rpc SearchForNetworks(SearchForNetworksRequest) returns (SearchForNetworksResponse);
  rpc InviteUserToNetwork(InviteUserToNetworkRequest) returns (InviteUserToNetworkResponse);
  rpc ReplyToNetworkInvite(NetworkInviteReplyRequest) returns (NetworkInviteReplyResponse);
}